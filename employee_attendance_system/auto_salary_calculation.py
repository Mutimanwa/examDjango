#!/usr/bin/env python
"""
Script pour automatiser le calcul des salaires √† la fin du mois
Ce script peut √™tre ex√©cut√© via cron ou un planificateur de t√¢ches
"""

import os
import sys
import django
from datetime import datetime, date
from pathlib import Path

# Ajouter le r√©pertoire du projet au path Python
project_dir = Path(__file__).parent
sys.path.insert(0, str(project_dir))

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'employee_attendance_system.settings')
django.setup()

from django.core.management import call_command
from django.utils import timezone
from employees.models import SalaryCalculation


def should_calculate_salaries():
    """
    D√©termine si les salaires doivent √™tre calcul√©s
    - Le 1er de chaque mois pour le mois pr√©c√©dent
    - Ou si c'est la fin du mois (derniers jours)
    """
    now = timezone.now()
    today = now.date()
    
    # V√©rifier si c'est le 1er du mois
    if today.day == 1:
        return True, "Premier du mois - calcul du mois pr√©c√©dent"
    
    # V√©rifier si c'est la fin du mois (derniers 3 jours)
    if today.day >= 28:  # Approximatif pour tous les mois
        return True, "Fin du mois - calcul du mois en cours"
    
    return False, "Pas encore le moment de calculer"


def main():
    """Fonction principale"""
    print("ü§ñ Calcul Automatique des Salaires")
    print("=" * 50)
    print(f"üìÖ Date/Heure: {timezone.now().strftime('%d/%m/%Y %H:%M:%S')}")
    
    # V√©rifier si le calcul est n√©cessaire
    should_calc, reason = should_calculate_salaries()
    
    if not should_calc:
        print(f"‚è≥ {reason}")
        return
    
    print(f"‚úÖ {reason}")
    
    # D√©terminer le mois √† calculer
    now = timezone.now()
    if now.day == 1:
        # Premier du mois : calculer le mois pr√©c√©dent
        if now.month == 1:
            month = 12
            year = now.year - 1
        else:
            month = now.month - 1
            year = now.year
    else:
        # Fin du mois : calculer le mois en cours
        month = now.month
        year = now.year
    
    print(f"üìä Calcul des salaires pour {month}/{year}")
    
    # V√©rifier si d√©j√† calcul√©
    existing = SalaryCalculation.objects.filter(month=month, year=year).count()
    if existing > 0:
        print(f"‚ö†Ô∏è  Les salaires pour {month}/{year} ont d√©j√† √©t√© calcul√©s ({existing} employ√©s)")
        print("üí° Utilisez --force pour recalculer si n√©cessaire")
        return
    
    try:
        # Ex√©cuter la commande de calcul
        call_command(
            'calculate_monthly_salaries',
            month=month,
            year=year,
            verbosity=2
        )
        print("üéâ Calcul automatique termin√© avec succ√®s!")
        
    except Exception as e:
        print(f"‚ùå Erreur lors du calcul automatique: {str(e)}")
        sys.exit(1)


if __name__ == '__main__':
    main()
